// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: capaign_affiliate.sql

package sqlc

import (
	"context"
)

const create_Affiliate_Campaign = `-- name: Create_Affiliate_Campaign :one
INSERT INTO affiliate_campaigns (
    affiliate_id,
    campaign_id,
    created_at
) VALUES (
    $1, $2, CURRENT_TIMESTAMP
) RETURNING affiliate_id, campaign_id, created_at
`

type Create_Affiliate_CampaignParams struct {
	AffiliateID int64
	CampaignID  int64
}

func (q *Queries) Create_Affiliate_Campaign(ctx context.Context, arg Create_Affiliate_CampaignParams) (AffiliateCampaign, error) {
	row := q.db.QueryRowContext(ctx, create_Affiliate_Campaign, arg.AffiliateID, arg.CampaignID)
	var i AffiliateCampaign
	err := row.Scan(&i.AffiliateID, &i.CampaignID, &i.CreatedAt)
	return i, err
}

const delete_Affiliate_Campaign = `-- name: Delete_Affiliate_Campaign :exec
DELETE FROM affiliate_campaigns
WHERE affiliate_id = $1 AND campaign_id = $2
`

type Delete_Affiliate_CampaignParams struct {
	AffiliateID int64
	CampaignID  int64
}

func (q *Queries) Delete_Affiliate_Campaign(ctx context.Context, arg Delete_Affiliate_CampaignParams) error {
	_, err := q.db.ExecContext(ctx, delete_Affiliate_Campaign, arg.AffiliateID, arg.CampaignID)
	return err
}

const get_Affiliate_Campaign = `-- name: Get_Affiliate_Campaign :one
SELECT affiliate_id, campaign_id, created_at
FROM affiliate_campaigns
WHERE affiliate_id = $1 AND campaign_id = $2
`

type Get_Affiliate_CampaignParams struct {
	AffiliateID int64
	CampaignID  int64
}

func (q *Queries) Get_Affiliate_Campaign(ctx context.Context, arg Get_Affiliate_CampaignParams) (AffiliateCampaign, error) {
	row := q.db.QueryRowContext(ctx, get_Affiliate_Campaign, arg.AffiliateID, arg.CampaignID)
	var i AffiliateCampaign
	err := row.Scan(&i.AffiliateID, &i.CampaignID, &i.CreatedAt)
	return i, err
}

const get_Affiliates_By_Campaign = `-- name: Get_Affiliates_By_Campaign :many
SELECT affiliate_id, campaign_id, created_at
FROM affiliate_campaigns
WHERE campaign_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Get_Affiliates_By_Campaign(ctx context.Context, campaignID int64) ([]AffiliateCampaign, error) {
	rows, err := q.db.QueryContext(ctx, get_Affiliates_By_Campaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AffiliateCampaign
	for rows.Next() {
		var i AffiliateCampaign
		if err := rows.Scan(&i.AffiliateID, &i.CampaignID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_Campaigns_By_Affiliate = `-- name: Get_Campaigns_By_Affiliate :many
SELECT affiliate_id, campaign_id, created_at
FROM affiliate_campaigns
WHERE affiliate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Get_Campaigns_By_Affiliate(ctx context.Context, affiliateID int64) ([]AffiliateCampaign, error) {
	rows, err := q.db.QueryContext(ctx, get_Campaigns_By_Affiliate, affiliateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AffiliateCampaign
	for rows.Next() {
		var i AffiliateCampaign
		if err := rows.Scan(&i.AffiliateID, &i.CampaignID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
