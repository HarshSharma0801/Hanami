// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clicks.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const create_Click = `-- name: Create_Click :one
INSERT INTO clicks (
    tracking_link_id,
    click_id,
    user_ip,
    user_agent,
    referrer,
    timestamp
) VALUES (
    $1, $2, $3, $4, $5, CURRENT_TIMESTAMP
) RETURNING id, tracking_link_id, click_id, user_ip, user_agent, referrer, timestamp
`

type Create_ClickParams struct {
	TrackingLinkID sql.NullInt64
	ClickID        uuid.UUID
	UserIp         string
	UserAgent      sql.NullString
	Referrer       sql.NullString
}

func (q *Queries) Create_Click(ctx context.Context, arg Create_ClickParams) (Click, error) {
	row := q.db.QueryRowContext(ctx, create_Click,
		arg.TrackingLinkID,
		arg.ClickID,
		arg.UserIp,
		arg.UserAgent,
		arg.Referrer,
	)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.TrackingLinkID,
		&i.ClickID,
		&i.UserIp,
		&i.UserAgent,
		&i.Referrer,
		&i.Timestamp,
	)
	return i, err
}

const get_Click_By_ClickID = `-- name: Get_Click_By_ClickID :one
SELECT id, tracking_link_id, click_id, user_ip, user_agent, referrer, timestamp
FROM clicks
WHERE click_id = $1
`

func (q *Queries) Get_Click_By_ClickID(ctx context.Context, clickID uuid.UUID) (Click, error) {
	row := q.db.QueryRowContext(ctx, get_Click_By_ClickID, clickID)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.TrackingLinkID,
		&i.ClickID,
		&i.UserIp,
		&i.UserAgent,
		&i.Referrer,
		&i.Timestamp,
	)
	return i, err
}

const get_Click_By_ID = `-- name: Get_Click_By_ID :one
SELECT id, tracking_link_id, click_id, user_ip, user_agent, referrer, timestamp
FROM clicks
WHERE id = $1
`

func (q *Queries) Get_Click_By_ID(ctx context.Context, id int64) (Click, error) {
	row := q.db.QueryRowContext(ctx, get_Click_By_ID, id)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.TrackingLinkID,
		&i.ClickID,
		&i.UserIp,
		&i.UserAgent,
		&i.Referrer,
		&i.Timestamp,
	)
	return i, err
}
