// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: campaign.sql

package sqlc

import (
	"context"
	"database/sql"
)

const campaign_Exists_By_Id = `-- name: Campaign_Exists_By_Id :one
SELECT EXISTS(SELECT 1 FROM campaigns WHERE id = $1)
`

func (q *Queries) Campaign_Exists_By_Id(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, campaign_Exists_By_Id, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const campaign_Exists_By_Name = `-- name: Campaign_Exists_By_Name :one
SELECT EXISTS(SELECT 1 FROM campaigns WHERE name = $1)
`

func (q *Queries) Campaign_Exists_By_Name(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, campaign_Exists_By_Name, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const create_Campaign = `-- name: Create_Campaign :one
INSERT INTO campaigns (
    brand_id,
    name,
    description,
    commission_rate,
    landing_url,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, CURRENT_TIMESTAMP
) RETURNING id, brand_id, name, description, commission_rate, landing_url, created_at
`

type Create_CampaignParams struct {
	BrandID        sql.NullInt64
	Name           string
	Description    sql.NullString
	CommissionRate string
	LandingUrl     string
}

func (q *Queries) Create_Campaign(ctx context.Context, arg Create_CampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, create_Campaign,
		arg.BrandID,
		arg.Name,
		arg.Description,
		arg.CommissionRate,
		arg.LandingUrl,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.CommissionRate,
		&i.LandingUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns
WHERE id = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, id)
	return err
}

const get_Campaign = `-- name: Get_Campaign :one
SELECT id, brand_id, name, description, commission_rate, landing_url, created_at
FROM campaigns
WHERE id = $1
`

func (q *Queries) Get_Campaign(ctx context.Context, id int64) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, get_Campaign, id)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.CommissionRate,
		&i.LandingUrl,
		&i.CreatedAt,
	)
	return i, err
}

const get_Campaigns_By_Brand = `-- name: Get_Campaigns_By_Brand :many
SELECT id, brand_id, name, description, commission_rate, landing_url, created_at
FROM campaigns
WHERE brand_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Get_Campaigns_By_Brand(ctx context.Context, brandID sql.NullInt64) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, get_Campaigns_By_Brand, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.Name,
			&i.Description,
			&i.CommissionRate,
			&i.LandingUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_Campaigns_By_UserID_As_Affiliate = `-- name: Get_Campaigns_By_UserID_As_Affiliate :many
SELECT 
    c.id AS campaign_id,
    c.brand_id,
    c.name AS campaign_name,
    c.description AS campaign_description,
    c.commission_rate,
    c.landing_url,
    c.created_at AS campaign_created_at,
    ac.created_at AS affiliate_campaign_created_at,
    b.id AS brand_id,
    b.company_name,
    b.website,
    b.created_at AS brand_created_at
FROM users u
JOIN affiliates a ON u.id = a.user_id
JOIN affiliate_campaigns ac ON a.id = ac.affiliate_id
JOIN campaigns c ON ac.campaign_id = c.id
JOIN brands b ON c.brand_id = b.id
WHERE u.id = $1
ORDER BY c.created_at DESC
`

type Get_Campaigns_By_UserID_As_AffiliateRow struct {
	CampaignID                 int64
	BrandID                    sql.NullInt64
	CampaignName               string
	CampaignDescription        sql.NullString
	CommissionRate             string
	LandingUrl                 string
	CampaignCreatedAt          sql.NullTime
	AffiliateCampaignCreatedAt sql.NullTime
	BrandID_2                  int64
	CompanyName                string
	Website                    sql.NullString
	BrandCreatedAt             sql.NullTime
}

func (q *Queries) Get_Campaigns_By_UserID_As_Affiliate(ctx context.Context, id int64) ([]Get_Campaigns_By_UserID_As_AffiliateRow, error) {
	rows, err := q.db.QueryContext(ctx, get_Campaigns_By_UserID_As_Affiliate, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Get_Campaigns_By_UserID_As_AffiliateRow
	for rows.Next() {
		var i Get_Campaigns_By_UserID_As_AffiliateRow
		if err := rows.Scan(
			&i.CampaignID,
			&i.BrandID,
			&i.CampaignName,
			&i.CampaignDescription,
			&i.CommissionRate,
			&i.LandingUrl,
			&i.CampaignCreatedAt,
			&i.AffiliateCampaignCreatedAt,
			&i.BrandID_2,
			&i.CompanyName,
			&i.Website,
			&i.BrandCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update_Campaign = `-- name: Update_Campaign :one
UPDATE campaigns
SET 
    name = $2,
    description = $3,
    commission_rate = $4,
    landing_url = $5
WHERE id = $1
RETURNING id, brand_id, name, description, commission_rate, landing_url, created_at
`

type Update_CampaignParams struct {
	ID             int64
	Name           string
	Description    sql.NullString
	CommissionRate string
	LandingUrl     string
}

func (q *Queries) Update_Campaign(ctx context.Context, arg Update_CampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, update_Campaign,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CommissionRate,
		arg.LandingUrl,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.Description,
		&i.CommissionRate,
		&i.LandingUrl,
		&i.CreatedAt,
	)
	return i, err
}
