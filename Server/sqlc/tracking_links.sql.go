// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tracking_links.sql

package sqlc

import (
	"context"
	"database/sql"
)

const create_TrackingLink = `-- name: Create_TrackingLink :one
INSERT INTO tracking_links (
    affiliate_id,
    campaign_id,
    link_code,
    created_at
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP
) RETURNING id, affiliate_id, campaign_id, link_code, created_at
`

type Create_TrackingLinkParams struct {
	AffiliateID sql.NullInt64
	CampaignID  sql.NullInt64
	LinkCode    string
}

func (q *Queries) Create_TrackingLink(ctx context.Context, arg Create_TrackingLinkParams) (TrackingLink, error) {
	row := q.db.QueryRowContext(ctx, create_TrackingLink, arg.AffiliateID, arg.CampaignID, arg.LinkCode)
	var i TrackingLink
	err := row.Scan(
		&i.ID,
		&i.AffiliateID,
		&i.CampaignID,
		&i.LinkCode,
		&i.CreatedAt,
	)
	return i, err
}

const delete_TrackingLink = `-- name: Delete_TrackingLink :exec
DELETE FROM tracking_links
WHERE id = $1
`

func (q *Queries) Delete_TrackingLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, delete_TrackingLink, id)
	return err
}

const get_TrackingLink_By_Link_Code = `-- name: Get_TrackingLink_By_Link_Code :one
SELECT id, affiliate_id, campaign_id, link_code, created_at
FROM tracking_links
WHERE link_code = $1
`

func (q *Queries) Get_TrackingLink_By_Link_Code(ctx context.Context, linkCode string) (TrackingLink, error) {
	row := q.db.QueryRowContext(ctx, get_TrackingLink_By_Link_Code, linkCode)
	var i TrackingLink
	err := row.Scan(
		&i.ID,
		&i.AffiliateID,
		&i.CampaignID,
		&i.LinkCode,
		&i.CreatedAt,
	)
	return i, err
}

const get_TrackingLink_For_Affiliate = `-- name: Get_TrackingLink_For_Affiliate :one
SELECT 
    tl.link_code,
    tl.campaign_id,
    a.id AS affiliate_id,
    u.username
FROM users u
JOIN affiliates a ON u.id = a.user_id
JOIN tracking_links tl ON a.id = tl.affiliate_id
WHERE tl.campaign_id = $1 AND u.id = $2
`

type Get_TrackingLink_For_AffiliateParams struct {
	CampaignID sql.NullInt64
	ID         int64
}

type Get_TrackingLink_For_AffiliateRow struct {
	LinkCode    string
	CampaignID  sql.NullInt64
	AffiliateID int64
	Username    string
}

func (q *Queries) Get_TrackingLink_For_Affiliate(ctx context.Context, arg Get_TrackingLink_For_AffiliateParams) (Get_TrackingLink_For_AffiliateRow, error) {
	row := q.db.QueryRowContext(ctx, get_TrackingLink_For_Affiliate, arg.CampaignID, arg.ID)
	var i Get_TrackingLink_For_AffiliateRow
	err := row.Scan(
		&i.LinkCode,
		&i.CampaignID,
		&i.AffiliateID,
		&i.Username,
	)
	return i, err
}

const get_TrackingLinks_By_Affiliate = `-- name: Get_TrackingLinks_By_Affiliate :many
SELECT id, affiliate_id, campaign_id, link_code, created_at
FROM tracking_links
WHERE affiliate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Get_TrackingLinks_By_Affiliate(ctx context.Context, affiliateID sql.NullInt64) ([]TrackingLink, error) {
	rows, err := q.db.QueryContext(ctx, get_TrackingLinks_By_Affiliate, affiliateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackingLink
	for rows.Next() {
		var i TrackingLink
		if err := rows.Scan(
			&i.ID,
			&i.AffiliateID,
			&i.CampaignID,
			&i.LinkCode,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_TrackingLinks_By_Campaign = `-- name: Get_TrackingLinks_By_Campaign :many
SELECT id, affiliate_id, campaign_id, link_code, created_at
FROM tracking_links
WHERE campaign_id = $1
ORDER BY created_at DESC
`

func (q *Queries) Get_TrackingLinks_By_Campaign(ctx context.Context, campaignID sql.NullInt64) ([]TrackingLink, error) {
	rows, err := q.db.QueryContext(ctx, get_TrackingLinks_By_Campaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackingLink
	for rows.Next() {
		var i TrackingLink
		if err := rows.Scan(
			&i.ID,
			&i.AffiliateID,
			&i.CampaignID,
			&i.LinkCode,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_Tracking_By_Link = `-- name: Get_Tracking_By_Link :one
SELECT id, affiliate_id, campaign_id, link_code, created_at
FROM tracking_links
WHERE id = $1
`

func (q *Queries) Get_Tracking_By_Link(ctx context.Context, id int64) (TrackingLink, error) {
	row := q.db.QueryRowContext(ctx, get_Tracking_By_Link, id)
	var i TrackingLink
	err := row.Scan(
		&i.ID,
		&i.AffiliateID,
		&i.CampaignID,
		&i.LinkCode,
		&i.CreatedAt,
	)
	return i, err
}
