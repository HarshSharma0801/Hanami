// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: main.sql

package sqlc

import (
	"context"
	"database/sql"
)

const create_Affiliate = `-- name: Create_Affiliate :one
INSERT INTO affiliates (user_id, created_at)
VALUES ($1, CURRENT_TIMESTAMP)
RETURNING id
`

func (q *Queries) Create_Affiliate(ctx context.Context, userID sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, create_Affiliate, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const create_Brand = `-- name: Create_Brand :one
INSERT INTO brands (user_id, company_name, website, created_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
RETURNING id
`

type Create_BrandParams struct {
	UserID      sql.NullInt64
	CompanyName string
	Website     sql.NullString
}

func (q *Queries) Create_Brand(ctx context.Context, arg Create_BrandParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, create_Brand, arg.UserID, arg.CompanyName, arg.Website)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const create_User_Affiliate = `-- name: Create_User_Affiliate :one
INSERT INTO users (username, email, password_hash, role, created_at)
VALUES ($1, $2, $3, 'affiliate', CURRENT_TIMESTAMP)
RETURNING id
`

type Create_User_AffiliateParams struct {
	Username     string
	Email        string
	PasswordHash string
}

func (q *Queries) Create_User_Affiliate(ctx context.Context, arg Create_User_AffiliateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, create_User_Affiliate, arg.Username, arg.Email, arg.PasswordHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const create_User_Brand = `-- name: Create_User_Brand :one
INSERT INTO users (username, email, password_hash, role, created_at)
VALUES ($1, $2, $3, 'brand', CURRENT_TIMESTAMP)
RETURNING id
`

type Create_User_BrandParams struct {
	Username     string
	Email        string
	PasswordHash string
}

func (q *Queries) Create_User_Brand(ctx context.Context, arg Create_User_BrandParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, create_User_Brand, arg.Username, arg.Email, arg.PasswordHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const get_User_By_Email = `-- name: Get_User_By_Email :one
SELECT id, username, email, password_hash, role, created_at
FROM users
WHERE email = $1
`

func (q *Queries) Get_User_By_Email(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, get_User_By_Email, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const user_Exists_By_Email = `-- name: User_Exists_By_Email :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) User_Exists_By_Email(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, user_Exists_By_Email, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
